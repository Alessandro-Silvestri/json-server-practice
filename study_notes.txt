start the server: (always use the watch command otherwise it gives errors when you do this: http://localhost:3000/products/1)
    npx json-server --watch db.json
    (in db.json there are 2 end points: products and rates)


GET request: (if the the first key is "id" : 4)
    http://localhost:3000/reviews/4


FILTER all the products with: "category" : "electronics",
    http://localhost:3000/products?category=electronics

    using the dot notation:
    http://localhost:3000/reviews?user.name=Alex

    using 2 filters with &
    http://localhost:3000/reviews?rate=4&user.name=Carlos


SORTING
    http://localhost:3000/products/?_sort=productName
    http://localhost:3000/products?_sort=price&_order=desc (changing the order but in json-server doesn't work)


PAGINATION
    https://jsonplaceholder.typicode.com/posts/?_page=3&_limit=4


OPERATORS (property greater than 0)
    https://jsonplaceholder.typicode.com/users?address.geo.lat_gte=0


OPERATORS (property less than 0)
    https://jsonplaceholder.typicode.com/comments?postId_lte=3


OPERATORS (property between 25 and 35)
    https://jsonplaceholder.typicode.com/comments?postId_gte=25&postId_lte=35


OPERATORS (property not equal to 25)
    https://jsonplaceholder.typicode.com/comments?postId_ne=25


OPERATORS (property starts with 'M')
    https://jsonplaceholder.typicode.com/comments?email_like=^M


FULL TEXT SEARCH (searching 'in')
    http://localhost:3000/products?q=in


RELATIONSHIP (: Foreign key must be {parentResourceName}Id (camelCase))
NB. json-server automatically remove the plurals
    http://localhost:3000/products?_embed=reviews


RELATIONSHIP (the same but showing just 1 item)
    http://localhost:3000/products/1?_embed=reviews


RELATIONSHIP (_expand: the reverse of _embed)
    http://localhost:3000/reviews/?_expand=product

/////////////////////////////////////////////////////////////////////////////////////////////////

                            POST data
                            (here posting a new product in JavaScript)
                            You don't need to specify the id as json-server generates it
                            automatically (anyway it's possible specify the "id")

fetch('http://localhost:3000/products', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
         "productName" : "Gaming Laptop",
            "category" : "computer",
            "brand" : "Asus",
            "price" : 1500,
            "isAvailable" : true,
            "description":{
                "productDescription" : "High performance gaming laptop",
                "productFeatures" : "RTX 4060, 16GB RAM, 1TB SSD"}
    })
})



/////////////////////////////////////////////////////////////////////////////////////////////////

                            PUT data (update / replace all)
                            it replaces all the values.
                            NB. if you don't specify a value it will be eliminated

fetch('http://localhost:3000/products/9', {  // Update product with id 4
    method: 'PUT',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        id: 9,  // Include the id (good practice)
        productName: "Dash Cam new version",  // Updated name
        category: "electronics",
        brand: "DashCam company",
        price: 40,  // Updated price
        isAvailable: true,  // Updated availability
        description: {
            productDescription: "High quality video with this new version",
            productFeatures: "Full HD micro sd 128GB"
        }
    })
})
    .then(response => response.json())
    .then(data => console.log('Updated product:', data))
    .catch(error => console.error('Error:', error));



/////////////////////////////////////////////////////////////////////////////////////////////////

                            PATCH data (update)
                            it replaces only the value you specify

fetch('http://localhost:3000/products/9', {  // Update product with id 9
    method: 'PATCH',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        price: 50,  // Updated price only
        isAvailable: false,  // Updated availability only
        description: {
            productDescription: "Enhanced dash cam with night vision",  // Updated description
            productFeatures: "4K Ultra HD, 256GB micro sd, GPS tracking"  // Updated features
        }
    })
})
    .then(response => response.json())
    .then(data => console.log('Updated product:', data))
    .catch(error => console.error('Error:', error));


/////////////////////////////////////////////////////////////////////////////////////////////////

                            DELETE data (update)
                            it replaces only the value you specify




arrived until here: (I have to do: configuration and random data)
https://youtu.be/zKmAs-MFlZw?list=PLC3y8-rFHvwhc9YZIdqNL5sWeTCGxF4ya